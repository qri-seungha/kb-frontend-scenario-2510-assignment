import { render, screen } from '@testing-library/react'
import { usePathname } from 'next/navigation'
import Header from '@/components/Header'

// Next.js ÌõÖ Î™®ÌÇπ
jest.mock('next/navigation', () => ({
  usePathname: jest.fn()
}))

// Ìè∞Ìä∏ Î™®ÌÇπ
jest.mock('@/styles/fonts', () => ({
  oswald: { className: 'oswald-font' }
}))

const menuActiveClass = 'text-[var(--color-primary)]'

describe('<Header>', () => {
  const mockUsePathname = usePathname as jest.Mock

  beforeEach(() => {
    mockUsePathname.mockReturnValue('/')
  })

  afterEach(() => {
    jest.clearAllMocks()
  })

  // Ìó§Îçî Í∏∞Î≥∏ Î†åÎçîÎßÅ ÌôïÏù∏
  test('Ìó§ÎçîÍ∞Ä Ï†ïÏÉÅÏ†ÅÏúºÎ°ú Î†åÎçîÎßÅÎêúÎã§', () => {
    render(<Header />)
    const header = screen.getByRole('banner')
    expect(header).toBeInTheDocument()
    expect(screen.getByText(/OMDbAPI/)).toBeInTheDocument()
  })

  // Î©îÎâ¥ Ìï≠Î™©Îì§ Ïò¨Î∞îÎ•∏ Î†åÎçîÎßÅ ÌôïÏù∏
  test('Î©îÎâ¥ Ìï≠Î™©Îì§Ïù¥ Ï†ïÏÉÅÏ†ÅÏúºÎ°ú Î†åÎçîÎßÅÎêúÎã§', () => {
    render(<Header />)
    expect(screen.getByText('üîç Search')).toBeInTheDocument()
    expect(screen.getByText('üìΩÔ∏è Sample Movie')).toBeInTheDocument()
  })

  // ÌòÑÏû¨ Í≤ΩÎ°úÏóê Îî∞Î•∏ ÌôúÏÑ± Î©îÎâ¥ Ïä§ÌÉÄÏùº Ï†ÅÏö© ÌôïÏù∏
  test('ÌòÑÏû¨ Í≤ΩÎ°úÍ∞Ä "/"Ïùº Îïå Search Î©îÎâ¥Í∞Ä ÌôúÏÑ±ÌôîÎêúÎã§', () => {
    mockUsePathname.mockReturnValue('/')
    render(<Header />)
    const searchMenuItem = screen.getByText('üîç Search').closest('li')
    const sampleMovieMenuItem = screen.getByText('üìΩÔ∏è Sample Movie').closest('li')

    expect(searchMenuItem).toHaveClass(menuActiveClass)
    expect(sampleMovieMenuItem).not.toHaveClass(menuActiveClass)
  })

  test('ÌòÑÏû¨ Í≤ΩÎ°úÍ∞Ä "/movies/tt4520988"Ïùº Îïå Sample Movie Î©îÎâ¥Í∞Ä ÌôúÏÑ±ÌôîÎêúÎã§', () => {
    mockUsePathname.mockReturnValue('/movies/tt4520988')
    render(<Header />)
    const searchMenuItem = screen.getByText('üîç Search').closest('li')
    const sampleMovieMenuItem = screen.getByText('üìΩÔ∏è Sample Movie').closest('li')

    expect(searchMenuItem).not.toHaveClass(menuActiveClass)
    expect(sampleMovieMenuItem).toHaveClass(menuActiveClass)
  })

  test('Ïïå Ïàò ÏóÜÎäî Í≤ΩÎ°úÏùº Îïå Î™®Îì† Î©îÎâ¥Í∞Ä ÎπÑÌôúÏÑ±ÌôîÎêúÎã§', () => {
    mockUsePathname.mockReturnValue('/unknown-path')
    render(<Header />)
    const searchMenuItem = screen.getByText('üîç Search').closest('li')
    const sampleMovieMenuItem = screen.getByText('üìΩÔ∏è Sample Movie').closest('li')

    expect(searchMenuItem).not.toHaveClass(menuActiveClass)
    expect(sampleMovieMenuItem).not.toHaveClass(menuActiveClass)
  })
})
